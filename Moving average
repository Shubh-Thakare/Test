data your_dataset; /* replace "your_dataset" with the actual name of your dataset */
  set your_dataset; /* replace "your_dataset" with the actual name of your dataset */
  
  by contract_number; /* assuming you have a variable named contract_number */

  /* Initialize the sum and count for each contract */
  retain sum_balance 0;
  retain count 0;

  /* Check if a new contract is encountered, reset the sum and count */
  if first.contract_number then do;
    sum_balance = 0;
    count = 0;
  end;

  /* Update the sum and count for each observation */
  sum_balance + balance_variable; /* replace "balance_variable" with the actual name of your balance variable */
  count + 1;

  /* Check if we have accumulated 3 months of data */
  if count = 3 then do;
    /* Calculate the 3-month moving average */
    moving_average = sum_balance / count;
    
    /* Output the result */
    output;

    /* Reset the sum and count for the next 3-month period */
    sum_balance = 0;
    count = 0;
  end;
run;




/* Assuming your dataset is named 'your_dataset' and has columns 'contract_number' and 'account_balance' */
data your_dataset;
  input contract_number month account_balance;
  datalines;
1 1 100
1 2 150
1 3 200
1 4 180
1 5 220
2 1 50
2 2 75
2 3 80
2 4 90
2 5 100
;

/* Sort the data by contract_number and month */
proc sort data=your_dataset;
  by contract_number month;
run;

/* Create a new dataset with the 3-month moving average */
data moving_avg_dataset;
  set your_dataset;
  by contract_number;

  /* Initialize the sum and count for each contract */
  if first.contract_number then do;
    sum_balance = 0;
    count = 0;
  end;

  /* Accumulate the sum and count for the 3-month period */
  sum_balance + account_balance;
  count + 1;

  /* Calculate the moving average when reaching the third month in the window */
  if count >= 3 then do;
    moving_avg = sum_balance / 3;
    output;
    sum_balance = sum_balance - lag2(account_balance);
    count = count - 1;
  end;

  /* Keep track of the last two account balances for the next iteration */
  lag2_account_balance = lag2(account_balance);
  lag1_account_balance = lag1(account_balance);
run;

/* Print the result */
proc print data=moving_avg_dataset;
run;






data have;
input member_id date :date9. amount;
format date date9.;
datalines;
1 01JAN2021 100
1 01FEB2021 0
1 01MAR2021 0
1 01APR2021 0
1 01MAY2021 50
1 01JUN2021 0
1 01JUL2021 0
1 01AUG2021 0
1 01SEP2021 0
1 01OCT2021 0
1 01NOV2021 0
1 01DEC2021 0
1 01JAN2022 150
2 01JAN2021 0
2 01FEB2021 0
2 01MAR2021 0
2 01APR2021 0
2 01MAY2021 0
2 01JUN2021 0
2 01JUL2021 0
2 01AUG2021 0
2 01SEP2021 0
2 01OCT2021 0
2 01NOV2021 0
2 01DEC2021 0
2 01JAN2022 0
;
run;

data want;
set have;
by member_id;
retain zero_flag 0;
if first.member_id then zero_flag = 0;

if amount = 0 then do;
    zero_flag + 1;
    if zero_flag = 1 then flag = 1;
    else flag = 0;
end;
else do;
    zero_flag = 0;
    flag = 0;
end;

drop zero_flag;
run;

proc print data=want;
run;







data have;
input member_id date :date9. amount;
format date date9.;
datalines;
1 01JAN2021 100
1 01FEB2021 0
1 01MAR2021 0
1 01APR2021 0
1 01MAY2021 50
1 01JUN2021 0
1 01JUL2021 0
1 01AUG2021 0
1 01SEP2021 0
1 01OCT2021 0
1 01NOV2021 0
1 01DEC2021 0
1 01JAN2022  0
2 01JAN2021 0
2 01FEB2021 50
2 01MAR2021 67
2 01APR2021 87
2 01MAY2021 0
2 01JUN2021 89
2 01JUL2021 0
3 01JAN2021 0
3 01FEB2021 0
3 01MAR2021 0
3 01APR2021 0
3 01MAY2021 0
3 01JUN2022 0
;
run;

data want;
set have;
by member_id;
retain flag 0;
if first.member_id then flag = 0; /* reset flag at the start of each member_id */
if amount = 0 then flag + 1; /* increment flag if amount is zero */
else flag = 0; /* reset flag if amount is not zero */
if flag = 3 then flag_date = date; /* mark the date if flag reaches 3 */
format flag_date date9.;
run;

proc print data=want;
run;









data your_data;
    input member_id date :date9. amount;
    format date date9.;
    datalines;
1 01JAN2021 100
1 01FEB2021 0
1 01MAR2021 0
1 01APR2021 0
1 01MAY2021 50
1 01JUN2021 0
1 01JUL2021 0
1 01AUG2021 0
1 01SEP2021 0
1 01OCT2021 0
1 01NOV2021 0
1 01DEC2021 0
1 01JAN2022 0
2 01JAN2021 0
2 01FEB2021 50
2 01MAR2021 67
2 01APR2021 87
2 01MAY2021 0
2 01JUN2021 89
2 01JUL2021 0
3 01JAN2021 0
3 01FEB2021 0
3 01MAR2021 0
3 01APR2021 0
3 01MAY2021 0
3 01JUN2022 0
;
run;

data flag_data;
    set your_data;
    by member_id;

    retain zero_flag 0 last_zero_month;

    if first.member_id then do;
        zero_flag = 0;
        last_zero_month = .;
    end;

    if amount = 0 then do;
        if zero_flag = 0 then last_zero_month = date;
        zero_flag + 1;
    end;
    else do;
        zero_flag = 0;
        last_zero_month = .;
    end;

    if zero_flag = 5 then flag = 1;
    else flag = 0;

    if last_zero_month ne . and amount ne 0 then last_zero_month = .;

    drop zero_flag;
run;









data have;
input id date :date9. amount;
format date date9.;
datalines;
1 01JAN2021 100
1 01FEB2021 0
1 01MAR2021 0
1 01APR2021 0
1 01MAY2021 50
1 01JUN2021 0
1 01JUL2021 0
1 01AUG2021 0
1 01SEP2021 0
1 01OCT2021 0
1 01NOV2021 0
1 01DEC2021 0
1 01JAN2022 0
2 01JAN2021 0
2 01FEB2021 50
2 01MAR2021 67
2 01APR2021 87
2 01MAY2021 0
2 01JUN2021 89
2 01JUL2021 0
3 01JAN2021 0
3 01FEB2021 0
3 01MAR2021 0
3 01APR2021 0
3 01MAY2021 0
3 01JUN2022 0
;
run;

data want;
set have;
by id;
retain zero_flag;
if first.id then zero_flag = 0;  /* Reset flag for each new member */

/* Check if amount is zero and the previous amount was also zero */
if amount = 0 and lag(amount) = 0 then zero_flag = 1;

/* Output the flag when it changes or for the first record of each member */
if first.id or zero_flag = 1 then output;

/* Keep the flag for next iteration */
if amount ne 0 then zero_flag = 0;
run;

proc print data=want;
format date date9.;
run;







data want;
  set have;
  by member_id;
  retain flag 0;
  
  if first.member_id then flag = 0; /* Reset flag for each member_id */
  
  if amount = 0 then flag = 1; /* Set flag to 1 if amount is zero */
  else flag = 0; /* Reset flag to 0 if amount is not zero */
  
  output;
run;

proc print data=want;
run;






data want;
    set have;
    by id;
    
    retain prev_amount;
    
    if first.id then do;
        prev_amount = amount;
    end;
    
    if amount = 0 and prev_amount ne 0 then do;
        flag = 1;
    end;
    else flag = 0;
    
    prev_amount = amount;
    
    drop prev_amount;
run;
